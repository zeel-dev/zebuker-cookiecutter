"""Logger helper module"""

import logging
from json import dumps


def create_logger(name):
    """
    Create and return a basic logger instance

    Parameters
    ----------
    name : string
        Name to initialize logger with.

    Returns
    -------
    logger
        Instance of logger.

    """

    logger = logging.getLogger(name)
    logger.setLevel(logging.DEBUG)
    # create console handler and set level to debug
    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    # create formatter
    formatter = logging.Formatter(
        '[%(asctime)s] %(levelname)s in %(module)s: %(message)s'
    )
    # add formatter to ch
    ch.setFormatter(formatter)
    # add ch to logger
    logger.addHandler(ch)
    return logger


def pretty_dump(dct):
    """
    Transform a dictionary to json and print it with indentations.

    Parameters
    ----------
    dct : dictionary
        Dictionary passed in for dumping.

    Returns
    -------
    None

    """
    print(dumps(dct, indent=4, sort_keys=True))


def handle_logger(name, file_path, fh_level=None, ch_level=None):
    """Create a logger instance with a path to send logs to. Logging levels for
    file and console can be passed with fh_level and ch_level.

    Parameters
    ----------
    name : string
        The namespace of the logger.
    log_file : string
        The file path to which logs will be sent.
    level : string, optional
        Acceptable values of logging levels:
        'CRITICAL'
        'ERR0R'
        'WARNING'
        'INFO'
        'DEBUG'
        'NOTSET'

    Returns
    -------
    logger
        Instance of a logger.
    """
    logger = logging.getLogger(name)
    logger.setLevel(logging.DEBUG)
    # create file handler which logs even debug messages
    if fh_level is None:
        fh_level = 'INFO'
    fh = logging.FileHandler(file_path)
    fh.setLevel(fh_level)
    # create console handler and set level to debug
    if ch_level is None:
        ch_level = 'INFO'
    ch = logging.StreamHandler()
    ch.setLevel(ch_level)
    # create formatter
    formatter = logging.Formatter(
        '[%(asctime)s] %(levelname)s in %(module)s: %(message)s'
    )
    # add formatter to ch
    ch.setFormatter(formatter)
    fh.setFormatter(formatter)
    # add ch to logger
    logger.addHandler(ch)
    logger.addHandler(fh)
    return logger
