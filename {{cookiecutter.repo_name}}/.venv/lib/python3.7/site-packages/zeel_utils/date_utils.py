"""Datetime helper module"""

import arrow
import datetime


def convert_to_utc(datetimestamp):
    """
    Converts string datetimestamp to return utc datetime object

    Parameters
    ----------
    datetimestamp : string
        Name to initialize logger with.

    Returns
    -------
    datetime
        Underlying datetime Arrow object not compatible with sqlalchemy.

    """
    # generate Arrow object type
    arw = arrow.get(datetimestamp)
    # Localize the Arrow datetime and convert to utc
    utc_timestamp = arw.to('local').to('utc')

    return utc_timestamp.naive


def next_weekday(d, weekday):
    """
    Return the next weekday relative to the weekday passed in.

    Parameters
    ----------
    d : datetime
        Name to initialize logger with.
    weekday: int
        0..6 - 0 for Monday, 6 for Sunday

    Returns
    -------
    datetime
        Datetime object of next weekday.

    """
    days_ahead = weekday - d.weekday()
    if days_ahead <= 0:
        days_ahead += 7
    return (d + datetime.timedelta(days_ahead)).replace(
        hour=12,
        minute=0,
        second=0
    )


def year_range(year):
    """
    Return a dict of two key, value pairs; start and end. Start and end
    indicate a range of a full year.

    Parameters
    ----------
    year : string
        The year to begin and end range with.

    Returns
    -------
    dict
        Key, value pair of start and end. Each of type datetime.

    """
    start = datetime.datetime(int(year), 1, 1)
    end = last_day_of_month(
        start.replace(month=12)
    ).replace(
        hour=23,
        minute=59,
        second=59
    )
    return {'start': start, 'end': end}


def month_range(year, month):
    """
    Return a dict of two key, value pairs; start and end. Start and end
    indicate a datetime range of a full month.

    Parameters
    ----------
    year : string
        The year the month belongs to.
    month: string
        The month to begin and end range with.

    Returns
    -------
    dict
        Key, value pair of start and end. Each of type datetime.

    """
    start = datetime.datetime(int(year), int(month), 1)
    end = last_day_of_month(start).replace(hour=23, minute=59, second=59)
    return {'start': start, 'end': end}


def last_day_of_month(date):
    """
    Return a datetime object of the last day of the month relative to the date
    passed in

    Parameters
    ----------
    date : datetime
        Date to which the last day of the month needs to be calculated.

    Returns
    -------
    datetime
        Last day of the month relative to date.

    """
    if date.month == 12:
        return date.replace(day=31)
    return date.replace(
        month=date.month + 1,
        day=1
    ) - datetime.timedelta(days=1)
